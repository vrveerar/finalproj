"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DEFAULT_AUTH_ENDPOINT = 'https://login.salesforce.com/services/oauth2/authorize';
var DEFAULT_TEST_AUTH_ENDPOINT = 'https://test.salesforce.com/services/oauth2/authorize';
var DEFAULT_LOGIN_ENDPOINT = 'https://login.salesforce.com/services/oauth2/token';
var DEFAULT_TEST_LOGIN_ENDPOINT = 'https://test.salesforce.com/services/oauth2/token';
var DEFAULT_API_VERSION = 44;
var Connection = /** @class */ (function () {
    /**
     * Creates an instance of an nforce Connection.
     * @param {IConnectionOpts} opts Configuration options for
     * the connection
     * @memberof Connection
     */
    function Connection(opts) {
        this.apiVersion = DEFAULT_API_VERSION.toFixed(0);
        this.environment = 'production';
        this.gzip = false;
        this.autoRefresh = false;
        this.timeout = null;
        this.environment = opts.environment || 'production';
        if (!opts.clientId) {
            throw new Error('invalid or missing clientId');
        }
        if (!opts.clientSecret) {
            throw new Error('invalid or missing clientSecret');
        }
        if (!opts.redirectUri) {
            throw new Error('invalid or missing redirectUri');
        }
        this.clientId = opts.clientId;
        this.clientSecret = opts.clientSecret;
        this.redirectUri = opts.redirectUri;
        if (opts.authEndpoint) {
            this.authEndpoint = opts.authEndpoint;
        }
        else if (this.environment === 'sandbox') {
            this.authEndpoint = DEFAULT_TEST_AUTH_ENDPOINT;
        }
        else {
            this.authEndpoint = DEFAULT_AUTH_ENDPOINT;
        }
        if (opts.loginEndpoint) {
            this.loginEndpoint = opts.loginEndpoint;
        }
        else if (this.environment === 'sandbox') {
            this.loginEndpoint = DEFAULT_TEST_LOGIN_ENDPOINT;
        }
        else {
            this.loginEndpoint = DEFAULT_LOGIN_ENDPOINT;
        }
        this.apiVersion = opts.apiVersion ? opts.apiVersion.toFixed(0) : DEFAULT_API_VERSION.toFixed(0);
        if (opts.oauth) {
            this.setOAuth(opts.oauth);
        }
    }
    /**
     * Returns the current API version number being used
     * by the connection
     * @returns {number}
     * @memberof Connection
     */
    Connection.prototype.getAPIVersion = function () {
        return parseInt(this.apiVersion, 10);
    };
    /**
     * Set the current API version for the connection
     * @param {number} apiVersion The integer value of
     * the API version the connection should use
     * @memberof Connection
     */
    Connection.prototype.setAPIVersion = function (apiVersion) {
        this.apiVersion = apiVersion.toFixed(0);
    };
    Connection.prototype.getOAuth = function () {
        return this.oauth;
    };
    Connection.prototype.setOAuth = function (oauthData) {
        this.oauth = oauthData;
    };
    return Connection;
}());
exports.default = Connection;
//# sourceMappingURL=connection.js.map