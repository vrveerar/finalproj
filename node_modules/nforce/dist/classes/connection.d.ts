export interface IOAuthData {
    /**
     * The salesforce oauth access token
     */
    access_token: string;
    /**
     * The salesforce oauth refresh token
     */
    refresh_token?: string;
    /**
     * The salesforce instance url
     */
    instance_url: string;
}
export interface IConnectionOpts {
    /**
     * The client Id of the connected app.
     */
    clientId: string;
    /**
     * The client secret of the connected app
     */
    clientSecret: string;
    /**
     * The client secret of the connected app
     */
    redirectUri: string;
    /**
     * Specify a particular authEndpoint. Otherwise
     * this defaults to the production endpoint or the
     * sandbox endpoint if `environment: sandbox` is set
     */
    authEndpoint?: string;
    /**
     * Specify a particular loginEndpoint. Otherwise
     * this defaults to the production endpoint or the
     * sandbox endpoint if `environment: sandbox` is set
     */
    loginEndpoint?: string;
    /**
     * The API version of Salesforce used for requests.
     * This should be an integer value for the API version
     * you wish to use.
     * @default https://login.salesforce.com/services/oauth2/token
     */
    apiVersion?: number;
    /**
     * Specify which environment you wish to connect to.
     * @default production
     */
    environment?: 'production' | 'sandbox';
    /**
     * Specify whether or not to use gzip compression when
     * making API requests to Salesforce
     * @default false
     */
    gzip?: boolean;
    /**
     * Configure the connection to attempt an auto-refresh
     * of expired tokens
     * @default false
     */
    autoRefresh?: boolean;
    /**
     * The timeout value in milliseconds for streaming connections
     * @default null
     */
    timeout?: number;
    /**
     * Optionally provide an OAuth data object obtained
     * from previous authentication.
     */
    oauth?: IOAuthData;
    /**
     * A callback function that is executed when an autoRefresh flow
     * has completed. This is useful for caching or storing the
     * resulting OAuth data that is returned.
     * @param error An Error object returned during the autoRefresh flow
     * @param oauth The OAuth data returned from the autoRefresh flow
     */
    onRefresh?(error: Error | null, oauth: any): void;
}
export default class Connection {
    private clientId;
    private clientSecret;
    private redirectUri;
    private authEndpoint;
    private loginEndpoint;
    private apiVersion;
    private environment;
    private gzip;
    private autoRefresh;
    private timeout;
    private oauth?;
    /**
     * Creates an instance of an nforce Connection.
     * @param {IConnectionOpts} opts Configuration options for
     * the connection
     * @memberof Connection
     */
    constructor(opts: IConnectionOpts);
    /**
     * Returns the current API version number being used
     * by the connection
     * @returns {number}
     * @memberof Connection
     */
    getAPIVersion(): number;
    /**
     * Set the current API version for the connection
     * @param {number} apiVersion The integer value of
     * the API version the connection should use
     * @memberof Connection
     */
    setAPIVersion(apiVersion: number): void;
    getOAuth(): IOAuthData | undefined;
    setOAuth(oauthData: IOAuthData): void;
}
